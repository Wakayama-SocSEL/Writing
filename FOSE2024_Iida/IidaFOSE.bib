% Encoding: UTF-8
@inproceedings{mujahid,
  author    = {Mujahid, Suhaib and Abdalkareem, Rabe and Shihab, Emad and McIntosh, Shane},
  title     = {Using Others' Tests to Identify Breaking Updates},
  year      = {2020},
  booktitle = {Proceedings of the 17th International Conference on Mining Software Repositories (MSR{\textquotesingle}20)},
  pages     = {466–476}
}

@inproceedings{mostafa2017experience,
  title={Experience paper: a study on behavioral backward incompatibilities of Java software libraries},
  author={Mostafa, Shaikh and Rodriguez, Rodney and Wang, Xiaoyin},
  booktitle={Proceedings of the 26th ACM SIGSOFT international symposium on software testing and analysis},
  pages={215--225},
  year={2017}
}

@inproceedings{raemaekers2012measuring,
  title={Measuring software library stability through historical version analysis},
  author={Raemaekers, Steven and Van Deursen, Arie and Visser, Joost},
  booktitle={2012 28th IEEE international conference on software maintenance (ICSM)},
  pages={378--387},
  year={2012},
  organization={IEEE}
}

@article{matsuda,
  title   = {ライブラリのテストケース変更に基づく後方互換性の実証的分析},
  author  = {松田 和輝 and 伊原 彰紀 and 才木 一也},
  journal = {ソフトウェア工学の基礎ワークショップ論文集},
  volume  = {28},
  pages   = {139-144},
  year    = {2021}
}

@article{10.1145/3428255,
    author = {M\o{}ller, Anders and Nielsen, Benjamin Barslev and Torp, Martin Toldam},
    title = {Detecting locations in JavaScript programs affected by breaking library changes},
    year = {2020},
    issue_date = {November 2020},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {4},
    number = {OOPSLA},
    url = {https://doi.org/10.1145/3428255},
    doi = {10.1145/3428255},
    abstract = {JavaScript libraries are widely used and evolve rapidly. When adapting client code to non-backwards compatible changes in libraries, a major challenge is how to locate affected API uses in client code, which is currently a difficult manual task. In this paper we address this challenge by introducing a simple pattern language for expressing API access points and a pattern-matching tool based on lightweight static analysis. Experimental evaluation on 15 popular npm packages shows that typical breaking changes are easy to express as patterns. Running the static analysis on 265 clients of these packages shows that it is accurate and efficient: it reveals usages of breaking APIs with only 14\% false positives and no false negatives, and takes less than a second per client on average. In addition, the analysis is able to report its confidence, which makes it easier to identify the false positives. These results suggest that the approach, despite its simplicity, can reduce the manual effort of the client developers.},
    journal = {Proc. ACM Program. Lang.},
    month = {nov},
    articleno = {187},
    numpages = {25},
    keywords = {breaking changes, software evolution, software maintenance}
}

@inproceedings{konstantopoulos2009best,
  title={Best principles in the design of shared software},
  author={Konstantopoulos, Dino and Marien, John and Pinkerton, Mike and Braude, Eric},
  booktitle={2009 33rd Annual IEEE International Computer Software and Applications Conference},
  volume={2},
  pages={287--292},
  year={2009},
  organization={IEEE}
}

@article{Moser1996effect,
  title={The effect of object-oriented frameworks on developer productivity},
  author={Moser, Simon and Nierstrasz, Oscar},
  journal={Computer},
  volume={29},
  number={9},
  pages={45--51},
  year={1996},
  publisher={IEEE}
}
