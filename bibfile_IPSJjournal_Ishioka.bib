% Encoding: UTF-8

@Article{Ikeda_README,
  author    = {Shohei Ikeda and Akinori Ihara and Raula Gaikovina Kula and Kenichi Matsumoto},
  journal   = {{IEICE} Transactions on Information and Systems},
  title     = {An Empirical Study of {README} contents for {JavaScript} Packages},
  year      = {2019},
  number    = {2},
  pages     = {280--288},
  volume    = {E102.D},
  doi       = {10.1587/transinf.2018edp7071},
  publisher = {Institute of Electronics, Information and Communications Engineers ({IEICE})},
}

@Article{prana_README,
  author    = {Gede Artha Azriadi Prana and Christoph Treude and Ferdian Thung and Thushari Atapattu and David Lo},
  journal   = {Empirical Software Engineering},
  title     = {Categorizing the Content of {GitHub} {README} Files},
  year      = {2018},
  number    = {3},
  pages     = {1296--1327},
  volume    = {24},
  doi       = {10.1007/s10664-018-9660-3},
  publisher = {Springer Science and Business Media {LLC}},
}

@Book{Ikeda_7,
  author    = {Laurent, Andrew M. St.},
  publisher = {O'Reilly Media, Inc.},
  title     = {Understanding Open Source and Free Software Licensing},
  year      = {2004},
  isbn      = {0596005814},
  abstract  = {If you've held back from developing open source or free software projects because you don't understand the implications of the various licenses, you're not alone. Many developers believe in releasing their software freely, but have hesitated to do so because they're concerned about losing control over their software. Licensing issues are complicated, and both the facts and fallacies you hear word-of-mouth can add to the confusion. Understanding Open Source and Free Software Licensing helps you make sense of the different options available to you. This concise guide focuses on annotated licenses, offering an in-depth explanation of how they compare and interoperate, and how license choices affect project possibilities. Written in clear language that you don't have to be a lawyer to understand, the book answers such questions as: What rights am I giving up? How will my use of OS/FS licensing affect future users or future developers? Does a particular use of this software--such as combining it with proprietary software--leave me vulnerable to lawsuits? Following a quick look at copyright law, contracts, and the definition of "open source," the book tackles the spectrum of licensing, including: The MIT (or X), BSD, Apache and Academic Free licensesThe GPL, LGPL, and Mozilla licensesThe QT, Artistic, and Creative Commons licensesClassic Proprietary licensesSun Community Source license and Microsoft Shared Source project The book wraps up with a look at the legal effects--both positive and negative--of open source/free software licensing. Licensing is a major part of what open source and free software are all about, but it's still one of the most complicated areas of law. Even the very simple licenses are tricky. Understanding Open Source and Free Software Licensing bridges the gap between the open source vision and the practical implications of its legal underpinnings. If open source and free software licenses interest you, this book will help you understand them. If you're an open source/free software developer, this book is an absolute necessity.},
}

@InProceedings{Kamei_7,
  author    = {Tom Mens and Mathieu Goeminne},
  booktitle = {Proceedings of the 3rd International Workshop on Software Ecosystems},
  title     = {Analysing the evolution of social aspects of open source software ecosystems},
  year      = {2011},
  pages     = {1--14},
}

@InProceedings{Ikeda_2,
  author    = {Jailton Coelho and Marco Tulio Valente},
  booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
  title     = {Why modern open source projects fail},
  year      = {2017},
  pages     = {186--196},
  publisher = {{ACM}},
  series    = {(ESEC/FSE 2017)},
  doi       = {10.1145/3106237.3106246},
}

@Article{Ikeda_9_Maalej_API,
  author    = {Walid Maalej and Martin P. Robillard},
  journal   = {{IEEE} Transactions on Software Engineering},
  title     = {Patterns of Knowledge in {API} Reference Documentation},
  year      = {2013},
  number    = {9},
  pages     = {1264--1282},
  volume    = {39},
  doi       = {10.1109/tse.2013.12},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
}

@Article{Ikeda_1_Abebe_note,
  author    = {Surafel Lemma Abebe and Nasir Ali and Ahmed E. Hassan},
  journal   = {Empirical Software Engineering},
  title     = {An empirical study of software release notes},
  year      = {2015},
  number    = {3},
  pages     = {1107--1142},
  volume    = {21},
  doi       = {10.1007/s10664-015-9377-5},
  publisher = {Springer Science and Business Media {LLC}},
}

@Article{Ikeda_11_Moreno_note,
  author    = {Laura Moreno and Gabriele Bavota and Massimiliano Di Penta and Rocco Oliveto and Andrian Marcus and Gerardo Canfora},
  journal   = {{IEEE} Transactions on Software Engineering},
  title     = {{ARENA}: An Approach for the Automated Generation of Release Notes},
  year      = {2017},
  number    = {2},
  pages     = {106--127},
  volume    = {43},
  doi       = {10.1109/tse.2016.2591536},
  publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
}

@Article{random_forest,
  author    = {Leo Breiman},
  journal   = {Machine Learning},
  title     = {Random Forests},
  year      = {2001},
  number    = {1},
  pages     = {5--32},
  volume    = {45},
  doi       = {10.1023/a:1010933404324},
  publisher = {Springer Science and Business Media {LLC}},
}

@InProceedings{Ikeda_EN_9,
  author    = {Erik Wittern and Philippe Suter and Shriram Rajagopalan},
  booktitle = {Proceedings of the 13th International Conference on Mining Software Repositories},
  title     = {A look at the dynamics of the {JavaScript} package ecosystem},
  year      = {2016},
  pages     = {351--361},
  publisher = {{ACM}},
  series    = {MSR '16},
  doi       = {10.1145/2901739.2901743},
  numpages  = {11},
}


%---------------------------------------------------------修論で増えるやつ---------------------------------------------------------
@InProceedings{Doc_maintenance1,
author = {de Souza, Sergio Cozzetti B. and Anquetil, Nicolas and de Oliveira, K\'{a}thia M.},
title = {A study of the documentation essential to software maintenance},
year = {2005},
isbn = {1595931759},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1085313.1085331},
doi = {10.1145/1085313.1085331},
abstract = {Software engineering has been striving for years to improve the practice of software development and maintenance. Documentation has long been prominent on the list of recommended practices to improve development and help maintenance. Recently however, agile methods started to shake this view, arguing that the goal of the game is to produce software and that documentation is only useful as long as it helps to reach this goal.On the other hand, in the re-engineering field, people wish they could re-document useful legacy software so that they may continue maintain them or migrate them to new platform.In these two case, a crucial question arises: "How much documentation is enough?" In this article, we present the results of a survey of software maintainers to try to establish what documentation artifacts are the most useful to them.},
booktitle = {Proceedings of the 23rd Annual International Conference on Design of Communication: Documenting \& Designing for Pervasive Information},
pages = {68-75},
numpages = {8},
keywords = {empirical study, program understanding, software maintenance, software system documentation},
location = {Coventry, United Kingdom},
series = {SIGDOC '05}
}

@Article{Doc_maintenance2,
author = {Kajko-Mattsson, Mira},
title = {A Survey of Documentation Practice within Corrective Maintenance},
year = {2005},
issue_date = {January 2005},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {10},
number = {1},
issn = {1382-3256},
url = {https://doi.org/10.1023/B:LIDA.0000048322.42751.ca},
doi = {10.1023/B:LIDA.0000048322.42751.ca},
abstract = {The purpose of documentation is to describe software systems and software processes. Consistent, correct and complete documentation of a software system is an important vehicle for the maintainer to gain its understanding, to ease its learning and/or relearning processes, and to make the system more maintainable. Poor system documentation, on the other hand, is the primary reason for quick software system quality degradation and ageing. Proper process documentation records the process, its stages and tasks, executing roles, their decisions and motivations, and the results of each individual process task. It is extremely important for achieving insight and visibility into the processes, important for their meaningful process measurement and thereby pivotal for achieving high process maturity. In this paper, we report on the results of an explorative study in which we have identified a number of rudimentary documentation requirements relevant within corrective maintenance, and found out how they were implemented within eighteen software organizations in Sweden. The goal was to examine the industrial documentation practice within corrective maintenance. Our results show that the documentation within corrective maintenance is still a very neglected issue within the organisations studied. None of our organisations has fully implemented all our documentation requirements.},
journal = {Empirical Software Engineering},
month = {jan},
pages = {31-55},
numpages = {25},
keywords = {Corrective maintenance, software process documentation, software system documentation}
}

@InProceedings{APIDoc_Detection,
author = {Zhou, Yu and Gu, Ruihang and Chen, Taolue and Huang, Zhiqiu and Panichella, Sebastiano and Gall, Harald},
title = {Analyzing APIs documentation and code to detect directive defects},
year = {2017},
isbn = {9781538638682},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE.2017.11},
doi = {10.1109/ICSE.2017.11},
abstract = {Application Programming Interface (API) documents represent one of the most important references for API users. However, it is frequently reported that the documentation is inconsistent with the source code and deviates from the API itself. Such inconsistencies in the documents inevitably confuse the API users hampering considerably their API comprehension and the quality of software built from such APIs. In this paper, we propose an automated approach to detect defects of API documents by leveraging techniques from program comprehension and natural language processing. Particularly, we focus on the directives of the API documents which are related to parameter constraints and exception throwing declarations. A first-order logic based constraint solver is employed to detect such defects based on the obtained analysis results. We evaluate our approach on parts of well documented JDK 1.8 APIs. Experiment results show that, out of around 2000 API usage constraints, our approach can detect 1158 defective document directives, with a precision rate of 81.6\%, and a recall rate of 82.0\%, which demonstrates its practical feasibility.},
booktitle = {Proceedings of the 39th International Conference on Software Engineering},
pages = {27-37},
numpages = {11},
keywords = {API documentation, natural language processing, static analysis},
location = {Buenos Aires, Argentina},
series = {ICSE '17}
}

@InProceedings{RN_gen,
   series={SEKE2021},
   title={Towards Automatically Generating Release Notes using Extractive Summarization Technique},
   ISSN={2325-9000},
   url={http://dx.doi.org/10.18293/SEKE2021-119},
   DOI={10.18293/seke2021-119},
   booktitle={International Conferences on Software Engineering and Knowledge Engineering},
   publisher={KSI Research Inc.},
   pages = {241-248},
   author={Sumana, Sristy},
   year={2021},
   month=jul, collection={SEKE2021} }


@Article{Kamei_README,
author="亀井 靖高 and 清水 一輝 and 柏 祐太郎 and 佐藤 亮介 and 鵜林 尚靖",
title="READMEファイルの進化に関する実証的分析",
journal="情報処理学会論文誌",
ISSN="1882-7764",
publisher="[出版社不明]",
year="2021",
month="04",
volume="62",
number="4",
pages="1076-1085",
DOI="10.20729/00210560",
URL="https://cir.nii.ac.jp/crid/1390572174824664064"
}

%---------------------------ここまで従来研究など，ここからベクトル化手法---------------------------

@InProceedings{Transfomer,
  title={Attention is All you Need},
  author={Ashish Vaswani and Noam M. Shazeer and Niki Parmar and Jakob Uszkoreit and Llion Jones and Aidan N. Gomez and Lukasz Kaiser and Illia Polosukhin},
  year={2017},
  booktitle = {Proceedings of the 31st International Conference on Neural Information Processing Systems},
  pages = {6000-6010},
  url={https://api.semanticscholar.org/CorpusID:13756489}
}



@Article{T5,
  title={Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer},
  author={Colin Raffel and Noam M. Shazeer and Adam Roberts and Katherine Lee and Sharan Narang and Michael Matena and Yanqi Zhou and Wei Li and Peter J. Liu},
  journal={J. Mach. Learn. Res.},
  year={2019},
  volume={21},
  pages={140:1-140:67},
  url={https://api.semanticscholar.org/CorpusID:204838007}
}





@misc{BERT,
      title={{BERT}: Pre-training of Deep Bidirectional Transformers for Language Understanding}, 
      author={Jacob Devlin and Ming-Wei Chang and Kenton Lee and Kristina Toutanova},
      year={2019},
      eprint={1810.04805},
      archivePrefix={arXiv},
      primaryClass={cs.CL}
}



@misc{RoBERTa,
      title={{R}o{BERT}a: A Robustly Optimized BERT Pretraining Approach}, 
      author={Yinhan Liu and Myle Ott and Naman Goyal and Jingfei Du and Mandar Joshi and Danqi Chen and Omer Levy and Mike Lewis and Luke Zettlemoyer and Veselin Stoyanov},
      year={2019},
      eprint={1907.11692},
      archivePrefix={arXiv},
      primaryClass={cs.CL}
}




@misc{CodeSerchNet,
      title={CodeSearchNet Challenge: Evaluating the State of Semantic Code Search}, 
      author={Hamel Husain and Ho-Hsiang Wu and Tiferet Gazit and Miltiadis Allamanis and Marc Brockschmidt},
      year={2020},
      eprint={1909.09436},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}



@InProceedings{CodeBERT,
    title = "{C}ode{BERT}: A Pre-Trained Model for Programming and Natural Languages",
    author = "Feng, Zhangyin  and
      Guo, Daya  and
      Tang, Duyu  and
      Duan, Nan  and
      Feng, Xiaocheng  and
      Gong, Ming  and
      Shou, Linjun  and
      Qin, Bing  and
      Liu, Ting  and
      Jiang, Daxin  and
      Zhou, Ming",
    editor = "Cohn, Trevor  and
      He, Yulan  and
      Liu, Yang",
    booktitle = "Findings of the Association for Computational Linguistics: EMNLP 2020",
    month = nov,
    year = "2020",
    address = "Online",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/2020.findings-emnlp.139",
    doi = "10.18653/v1/2020.findings-emnlp.139",
    pages = "1536--1547",
    abstract = "We present CodeBERT, a bimodal pre-trained model for programming language (PL) and natural language (NL). CodeBERT learns general-purpose representations that support downstream NL-PL applications such as natural language code search, code documentation generation, etc. We develop CodeBERT with Transformer-based neural architecture, and train it with a hybrid objective function that incorporates the pre-training task of replaced token detection, which is to detect plausible alternatives sampled from generators. This enables us to utilize both {``}bimodal{''} data of NL-PL pairs and {``}unimodal data, where the former provides input tokens for model training while the latter helps to learn better generators. We evaluate CodeBERT on two NL-PL applications by fine-tuning model parameters. Results show that CodeBERT achieves state-of-the-art performance on both natural language code search and code documentation generation. Furthermore, to investigate what type of knowledge is learned in CodeBERT, we construct a dataset for NL-PL probing, and evaluate in a zero-shot setting where parameters of pre-trained models are fixed. Results show that CodeBERT performs better than previous pre-trained models on NLPL probing.",
}




@InProceedings{CodeT5+,
  title={CodeT5+: Open Code Large Language Models for Code Understanding and Generation},
  author={Wang, Yue and Le, Hung and Gotmare, Akhilesh Deepak and Bui, Nghi D.Q. and Li, Junnan and Hoi, Steven C. H.},
  journal={arXiv preprint},
  
  booktitle = {Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing},
  pages={1069--1088},
  year={2023}
}












%---------------------------------------------------------修論で増えるやつ---------------------------------------------------------

@Comment{jabref-meta: databaseType:bibtex;}
